ver:"3.0"
depends,func,name,src
["toolExportFunc"],M,"toolExportFunc","/*\n  For a given function name or list of names, load function records \n  as well as any func dependencies. Remove transient tags. Export results\n  to `io/tmp/func.zinc`\n  \n  Arguments: \n  fNamesList     List of Str, names of target functions\n                    Can also be one Str, will be converted to [Str]\n  level             Number, used for recursiveness, 0 is main call\n\n  // kW Engineering // RGV // Last Update: 2019-10-14 //\n*/\n\n(fNamesList, level:0) => do\n  // If single name given, convert to list\n  if (isStr(fNamesList)) fNamesList= [fNamesList]\n  // Remove duplicates\n  fNamesList= fNamesList.unique()\n  // Initialize updated list of fNames to keep track of changes\n  fNamesListU: fNamesList\n  \n  // Go through list and add dependencies within list\n  fNamesList.each fName => do\n    // Find function by name\n    f: read(func and name==fName, false)\n    // Remove name from list if function not found\n    if (f==null) fNamesListU= fNamesListU.findAll(v => v!=fName)\n    // Add dependencies if function found\n    else if (f.has(\"depends\"))\n      fNamesListU= fNamesListU.addAll(f->depends)\n  end\n  \n  // Remove duplicates from new list\n  fNamesListU= fNamesListU.unique()\n\n  // Compare lists to determine if any changes were made\n  noChanges: fNamesListU.all(fName => fNamesList.contains(fName))\n             and\n             fNamesList.all(fName => fNamesListU.contains(fName))\n\n  // If changes were made, call function again to evaluate\n  // dependencies of the functions that were added\n  if (not(noChanges))\n    fNamesListFinal: toolExportFunc(fNamesListU, level+1)\n  else\n    fNamesListFinal: fNamesListU\n  \n  // Recursive calls return\n  if (level > 0) return fNamesListFinal\n  // Main call continues (level == 0), if list is empty exit\n  if (fNamesListFinal.size==0) return null\n \n  // Load function and all dependencies\n  fs: readAll(func).findAll(r => fNamesListFinal.contains(r->name))\n  \n  // Remove empty columns\n  nullColNames: fs.colNames.findAll colName => do\n    fs.all row => row[colName] == null\n  end\n  fs= fs.removeCols(nullColNames)\n\n  // Remove transient tags\n  fs= fs.removeCols([\"id\",\"mod\"])\n  \n  // Store results\n  fs.ioWriteZinc(`io/tmp/func.zinc`)\nend\n\n/*\n  Updates\n  2019-10-14   Added recursiveness for dependency trees\n*/"

