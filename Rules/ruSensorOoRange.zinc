ver:"3.0"
depends,func,name,src
[],M,"ruSensorOoRange","/*\n\n This function returns a grid of periods an equip has a sensor that returns\n out-of-range readings or uses an unexpected unit.\n Currently the following sensors are being tested:\n - air and temp - allowed range -20°F - 120°F\n - water and temp - allowed range 20°F - 200°F\n \n Arguments:\n equip           equip record of equip to test\n span            dateSpan, span of dates to run analysis on\n minTime         duration, filter out periods shorter than minTime\n mergePeriod     duration, merge flagged periods separated by less than\n                 mergePeriod\n \n // kW Engineering // RGV // Last Update: 2018-09-24 //\n\n*/\n\n(equip:readById(@p:lbnl:r:2324cceb-e30a4c1a), span:pastWeek(),\n minTime: 30min, mergePeriod: 15min) => do\n  // Allowed ranges and units\n  rangeAirTemp: [-20°F, 120°F]\n  rangeWaterTemp: [20°F, 200°F]\n  unitsTemp: [\"°F\", \"°C\", \"K\"]\n  \n  // Test air temp sensors\n  fAirTemp: readAll(air and temp and sensor and not virtual\n                    and equipRef==equip->id)\n            .hisRead(span)\n            \n  if (not(isEmpty(fAirTemp))) do\n    fAirTemp= fAirTemp\n        .hisInterpolate()\n        .hisClip()\n        .hisMap(v => if (v == null or v == na()) false\n                     else if (not(unitsTemp.contains(unit(v)))) true\n                     else if (v.to(\"°F\") < rangeAirTemp[0]\n                              or v.to(\"°F\") > rangeAirTemp[1]) true\n                     else false)\n        .map(row => {ts: row->ts,\n                     v0: any(row.remove(\"ts\"), v => v)})\n        .hisFindPeriods(v => v)\n  end\n  \n  if (isEmpty(fAirTemp)) fAirTemp= null\n\n  // Test water temp sensors\n  fWaterTemp: readAll(water and temp and sensor and not virtual\n                      and equipRef==equip->id)\n              .hisRead(span)\n              \n  if (not(isEmpty(fWaterTemp))) do\n    fWaterTemp= fWaterTemp\n        .hisInterpolate()\n        .hisClip()\n        .hisMap(v => if (v == null or v == na()) false\n                     else if (not(unitsTemp.contains(unit(v)))) true\n                     else if (v.to(\"°F\") < rangeWaterTemp[0]\n                              or v.to(\"°F\") > rangeWaterTemp[1]) true\n                     else false)\n        .map(row => {ts: row->ts,\n                     v0: any(row.remove(\"ts\"), v => v)})\n        .hisFindPeriods(v => v)\n  end\n  \n  if (isEmpty(fWaterTemp)) fWaterTemp= null\n\n  // Join grids\n  flagPeriods: hisPeriodUnion([fAirTemp, fWaterTemp])\n  \n  // Merge adjacent short periods, filter out remaining short periods\n  flagPeriods = hisPeriodShift(flagPeriods, -mergePeriod/2, mergePeriod/2)\n  flagPeriods = hisPeriodShift(flagPeriods, mergePeriod/2, -mergePeriod/2)\n  flagPeriods = flagPeriods.findAll(r => r->v0 >= minTime)\n  \n  if (isEmpty(flagPeriods)) return null\n  \n  dis: equip.dis() + \" has one or more sensors out of range\"\n  return flagPeriods.addColMeta(\"v0\", {dis: dis})\nend\n"
