ver:"3.0"
depends,func,name,ruleOn,src
[],M,"ruDamperControl","terminalUnit or zone","/*\n  This function returns a period that an equip with a damper cmd is in a\n  given range more than a given percentage of the time during the given\n  period. In effect, either the entire period is returned, or null.\n  \n  Arguments:\n  equip           equip record of equip to test airflow on\n  span            dateSpan, span of dates to run analysis on\n  pbRange         list of min and max position, defining a range\n                  that the damper cmd shouldn't stay in for too long\n  timeTolerance   number, between 0 and 1 (0% and 100%). Issue is flagged\n                  if total issue time covers at least this percentage of\n                  the total analysis span duration.\n  occOnly         boolean, if true and if there is an occupied zone cmd point\n                  on the equip, filter out periods when the occupied cmd\n                  is OFF\n                  \n  // kW Engineering // RGV // Last Update: 2018-09-18 //\n*/\n\n(equip:readById(@p:lbnl:r:2324cceb-a74e8cdc), span:pastWeek(),\n pbRange: [99%,100%], timeTolerance: 0.9, occOnly:false) => do\n  // Params\n  minVals: 3\n \n  // Check inputs, prepare filters\n  if (timeTolerance > 1) timeTolerance= 1\n  if (timeTolerance <0) timeTolerance= 0\n  timeTolerance= timeTolerance.as(1) // Remove unit if any\n  \n  rangeMin: max(min(pbRange[0].as(\"%\"),100%),0%)\n  rangeMax: max(min(pbRange[1].as(\"%\"),100%),rangeMin)\n  \n  // Retrieve occupied command if occOnly is true\n  if (occOnly)\n    occ: read(point and occupied and zone and cmd\n              and equipRef==equip->id, false)\n  else occ: null\n  \n  if (occ != null) occ= occ.hisRead(span, {limit:null})\n                           .hisFindPeriods(v => v)\n  \n  // Calculate timeThreshold\n  span= span.toDateSpan\n  if (occ != null)\n    timeThreshold: occ.foldCol(\"v0\",sum)\n                   * timeTolerance\n  else\n    timeThreshold: (span.end - span.start + 1day) * timeTolerance\n  \n  // If equip does not have a damper cmd, return null\n  damper: read(point and damper and cmd and unit==\"%\"\n               and equipRef==equip->id, false)\n  if (damper == null) return null\n  \n  // Read history, return null if not enough data points\n  data: damper.hisRead(span, {limit: null})\n  if (occ != null) data= data.hisFindInPeriods(occ)\n  if (data.foldCol(\"v0\",count) < minVals) return null\n  \n  // Find periods where damper cmd is in given range\n  flagPeriods: data.hisFindPeriods(p => (p >= rangeMin) and\n                                        (p <= rangeMax))\n  \n  if (isEmpty(flagPeriods)) return null\n  \n  // If cumulative flagged time is less than threshold, return null\n  if (flagPeriods.foldCol(\"v0\", sum) <= timeThreshold) return null\n  \n  // Otherwise return entire period\n  period: data.hisFindPeriods(v => true)\n  dis: period.col(\"v0\").meta->navName + \" is too often in range \"\n    + rangeMin + \" - \" + rangeMax\n  return period.addColMeta(\"v0\", {dis: dis})\nend\n"
