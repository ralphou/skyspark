ver:"3.0"
depends,dis,func,help,name,ruleOn,src
[],"Zone Temp Deadband Too Tight",M,"Effective zone deadband between cooling and heating setpoint was below threshold (default 2°F), or setpoints are reversed","ruZoneDeadbandTight","terminalUnit or zone","(equip, dates, minDb: 2°F, minTime: 1h, mergePeriod: 15min) => do\n  // Get setpoints\n  cool: read(point and zone and air and temp\n             and effective and cooling and sp\n             and equipRef==equip->id, false)\n  heat: read(point and zone and air and temp\n             and effective and heating and sp\n             and equipRef==equip->id, false)\n             \n  // If the zone has only one setpoint, no deadband needed\n  if (cool==null or heat==null) return null\n  \n  // Read history, combine, calculate deadband\n  diff: [cool,heat].hisRead(dates, {limit: null})\n             .hisInterpolate()\n             .addCol(\"diff\", row => do\n               if (row[\"v0\"]==null or row[\"v1\"]==null or row[\"v0\"]==0)\n                 return null\n               else\n                 return (row[\"v0\"] - row[\"v1\"]).as(unit(row[\"v0\"]))\n             end)\n             .keepCols([\"ts\",\"diff\"])\n             .hisFindAll(val => val != null)\n   \n  // Find periods deadband is tighter than parameter (or negative)\n  flagPeriods: diff.hisFindPeriods(val => val.to(\"°F\") < minDb)\n\n  // Merge adjacent short periods, filter out remaining short periods\n  flagPeriods = hisPeriodShift(flagPeriods, -mergePeriod/2, mergePeriod/2)\n  flagPeriods = hisPeriodShift(flagPeriods, mergePeriod/2, -mergePeriod/2)\n  flagPeriods = flagPeriods.findAll(r => r->diff >= minTime)\n  \n  if (isEmpty(flagPeriods)) return null\n  \n  dis: equip->navName + \" has a tight deadband or reversed setpoints\"\n  return flagPeriods.addColMeta(\"diff\", {dis: dis})\nend\n"
