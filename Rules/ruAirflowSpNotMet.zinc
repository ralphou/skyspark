ver:"3.0"
depends,dis,func,help,name,ruleOn,src
[],"Airflow Setpoint Not Met",M,"Airflow deviates from setpoint by a given relative tolerance (default 10%) and a given absolute tolerance (default 50 cfm) for longer than a given time period (default 1h)","ruAirflowSpNotMet","terminalUnit","/*\n This function returns a grid of periods an equip with an air flow sensor\n and an air flow sp does not meet its setpoint.\n \n Arguments:\n equip           equip record of equip to test airflow on\n span            dateSpan, span of dates to run analysis on\n tolerance       number, between 0 and 1 (0% and 100%). Airflow is not met if\n                 it is more than +/-toleance% different from setpoint\n andAbsTolerance number, absolute tolerance in cfm. Both tolerances need\n                 to be exceeded for an issue to be flagged\n minTime         duration, filter out periods shorter than minTime\n mergePeriod     duration, merge flagged periods separated by less than\n                 mergePeriod\n \n // kW Engineering // RGV // Last Update: 2018-09-18 //\n*/\n\n(equip:readById(@p:lbnl:r:2324cceb-e30a4c1a), span:pastWeek(),\n tolerance:0.1, andAbsTolerance:50cfm,\n minTime: 2h, mergePeriod: 15min) => do\n  // Check inputs, prepare filters\n  if (tolerance > 1) tolerance= 1\n  if (tolerance <0) tolerance= 0\n  tolerance= tolerance.as(1) // Remove unit if any\n  \n  // If equip does not have both an air flow sensor and an air flow effective sp,\n  // return null\n  sen: read(point and air and flow and sensor and equipRef==equip->id, false)\n  sp: read(point and air and flow and effective and sp and equipRef==equip->id, false)\n  if (sen == null or sp == null)\n    return null\n  \n  // Read history for both sensor and sp, calculate difference\n  data: [sp, sen].hisRead(span, {limit: null}).hisInterpolate().hisClip()\n                 // Remove null and na() values\n                 .findAll(row => row[\"v0\"] != null and row[\"v1\"] != null\n                                 and  row[\"v0\"] != na() and row[\"v1\"] != na())\n\n  diff: data.addCol(\"diff\", row => \n          ((if (abs(row->v0 - row->v1) > andAbsTolerance)\n              abs(row->v0 - row->v1)\n            else\n              0\n           ) / row->v1\n          ).as(1))\n        .keepCols([\"ts\",\"diff\"])\n        \n  // Find periods airflow setpoint is not met\n  flagPeriods: diff.hisFindPeriods(diff => diff > tolerance)\n  \n  // Merge adjacent short periods, filter out remaining short periods\n  flagPeriods = hisPeriodShift(flagPeriods, -mergePeriod/2, mergePeriod/2)\n  flagPeriods = hisPeriodShift(flagPeriods, mergePeriod/2, -mergePeriod/2)\n  flagPeriods = flagPeriods.findAll(r => r->diff >= minTime)\n  \n  if (isEmpty(flagPeriods)) return null\n  \n  dis: sp->navName + \" is not met\"\n  return flagPeriods.addColMeta(\"diff\", {dis: dis})\nend\n"

